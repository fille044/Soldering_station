
ATtiny_Solder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080a  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052c  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fe  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000310  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000297  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	1d c0       	rjmp	.+58     	; 0x68 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:


int main(void)
{
	int Variabel = 0;
	DDRB = 0b00010000;
  30:	80 e1       	ldi	r24, 0x10	; 16
  32:	87 bb       	out	0x17, r24	; 23
	while (1)
	{
		_delay_ms(500);
		if ((PINB & (1<<PB4)) != 0) {
			PORTB = 0b00001001;
  34:	89 e0       	ldi	r24, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  36:	2f e9       	ldi	r18, 0x9F	; 159
  38:	36 e8       	ldi	r19, 0x86	; 134
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	21 50       	subi	r18, 0x01	; 1
  3e:	30 40       	sbci	r19, 0x00	; 0
  40:	40 40       	sbci	r20, 0x00	; 0
  42:	e1 f7       	brne	.-8      	; 0x3c <main+0xc>
  44:	00 c0       	rjmp	.+0      	; 0x46 <__SREG__+0x7>
  46:	00 00       	nop
	int Variabel = 0;
	DDRB = 0b00010000;
	while (1)
	{
		_delay_ms(500);
		if ((PINB & (1<<PB4)) != 0) {
  48:	b4 9b       	sbis	0x16, 4	; 22
  4a:	0c c0       	rjmp	.+24     	; 0x64 <__SREG__+0x25>
			PORTB = 0b00001001;
  4c:	88 bb       	out	0x18, r24	; 24
  4e:	9a e2       	ldi	r25, 0x2A	; 42
  50:	20 e5       	ldi	r18, 0x50	; 80
  52:	3e ef       	ldi	r19, 0xFE	; 254
  54:	40 e0       	ldi	r20, 0x00	; 0
  56:	91 50       	subi	r25, 0x01	; 1
  58:	20 40       	sbci	r18, 0x00	; 0
  5a:	30 40       	sbci	r19, 0x00	; 0
  5c:	40 40       	sbci	r20, 0x00	; 0
  5e:	d9 f7       	brne	.-10     	; 0x56 <__SREG__+0x17>
  60:	00 00       	nop
  62:	e9 cf       	rjmp	.-46     	; 0x36 <main+0x6>
			_delay_ms(100000);
		}
		else {
			PORTB = 0;
  64:	18 ba       	out	0x18, r1	; 24
  66:	e7 cf       	rjmp	.-50     	; 0x36 <main+0x6>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>
